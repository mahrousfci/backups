{
  "id": 3,
  "name": "Activation Weekly Report Fix Attempt",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyWeek"
            }
          ]
        }
      },
      "name": "Cron",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -680,
        480
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge6",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        340,
        400
      ]
    },
    {
      "parameters": {
        "command": "=C:\\Users\\ies325\\Documents\\bin\\tctl.exe --address 10.201.4.24:7233 workflow showid {{$json[\"searchWorkflowId\"]}}"
      },
      "name": "tctlSearch",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        200,
        560
      ],
      "alwaysOutputData": false,
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "item.searchWorkflowId = `subscription::${item[\"SubscriptionId\"]}`;\n\nreturn item;"
      },
      "name": "FunctionItem2",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        40,
        480
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{!!$node[\"tctlSearch\"].json[\"error\"]}}",
              "value2": true
            }
          ],
          "number": []
        }
      },
      "name": "IFNoSubscriptionWF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        540,
        480
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "name": "SplitInBatches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        -220,
        480
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$node[\"SplitInBatches\"].context[\"noItemsLeft\"]}}",
              "value2": true
            }
          ]
        }
      },
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        620,
        1100
      ]
    },
    {
      "parameters": {},
      "name": "NoOp2",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        900,
        1080
      ]
    },
    {
      "parameters": {
        "functionCode": "function sleep(milliseconds) {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  );\n}\n\nawait sleep(500);\n\n// Output data\nreturn items;"
      },
      "name": "Sleep 3 secs",
      "type": "n8n-nodes-base.function",
      "position": [
        400,
        1100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "function sleep(milliseconds) {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  );\n}\n\nawait sleep(500);\n\n// Output data\nreturn items;"
      },
      "name": "Sleep 3 secs1",
      "type": "n8n-nodes-base.function",
      "position": [
        820,
        500
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\nccs.customer_contract_subscriptionid as SubscriptionId,\nc.customerid,\npc.product_catalogue_name,\nccs.created_at ,\nccs.contract_period_start,\nccs.bill_from ,\nccstatus.status status,\nCASE\nWHEN provisioning_status = 0 THEN \"NOT SENT\"\nWHEN provisioning_status = 1 THEN \"ACTIVE\"\nWHEN provisioning_status = 2 THEN \"TERMINATED\"\nWHEN provisioning_status = 3 THEN \"FAILED\"\nWHEN provisioning_status = 4 THEN \"UNDER ACTIVATION\"\nWHEN provisioning_status = 5 THEN \"UNDER TERMINATTION\"\nWHEN provisioning_status = 6 THEN \"PARTLY FAILED\"\nWHEN provisioning_status = 7 THEN \"CREATED\"\nWHEN provisioning_status = 8 THEN \"WAITING 4 DELIVERY\"\nWHEN provisioning_status = 9 THEN \"WAITING ON HUMAN TASK\"\nWHEN provisioning_status = 99 THEN \"MANUAL\"\nELSE \"UNKNOWN\"\nEND provisioning_status\nFROM customer_contract_subscription ccs\nJOIN customer_order co on co.customer_orderid = ccs.customer_orderid\nJOIN customer_contract cc on cc.customer_contractid = ccs.customer_contractid\nJOIN customer_contract_status ccstatus on ccstatus.customer_contract_statusid = ccs.contract_status\nJOIN product_catalogue pc on pc.product_catalogueid = ccs.product_catalogueid\nJOIN customer_network cn on cc.customer_networkid = cn.customer_networkid\nJOIN customer c on c.crmid = cc.crmid\nWHERE ccs.contract_status in (6)\nAND provisioning_status != 4\nAND cn.name != 'Productiontest'\n-- AND ccs.contract_period_start < '2021-12-16 23:59:59.999'\nAND ccs.contract_period_start < CURDATE()\norder BY ccs.created_at\n;"
      },
      "name": "PendingActivationOrders",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        -460,
        480
      ],
      "credentials": {
        "mySql": {
          "id": null,
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1000,
        120
      ]
    },
    {
      "parameters": {
        "command": "=C:\\Users\\ies325\\Documents\\bin\\tctl.exe --address 10.201.4.24:7233 workflow showid {{$json[\"searchWorkflowId\"]}}"
      },
      "name": "tctlSearch1",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        780,
        200
      ],
      "alwaysOutputData": false,
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{!!$node[\"tctlSearch1\"].json[\"error\"]}}",
              "value2": true
            }
          ],
          "number": []
        }
      },
      "name": "IFNoSubscriptionWF1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1200,
        180
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "functionCode": "function sleep(milliseconds) {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  );\n}\n\nawait sleep(500);\n\n// Output data\nreturn items;"
      },
      "name": "Sleep 3 secs2",
      "type": "n8n-nodes-base.function",
      "position": [
        1480,
        100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filePath": "=C:\\Users\\ies325\\Documents\\n8n\\packages\\cli\\bin\\temp-{{$json[\"subscriptionid\"]}}.json"
      },
      "name": "Read Binary File1",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        1420,
        680
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Move Binary Data",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        1640,
        880
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge7",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1420,
        380
      ]
    },
    {
      "parameters": {
        "filePath": "=C:\\Users\\ies325\\Documents\\n8n\\packages\\cli\\bin\\temp-{{$json[\"childWorflowId\"]}}.json"
      },
      "name": "Read Binary File2",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        2640,
        860
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Move Binary Data1",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        2780,
        1000
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge8",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2280,
        700
      ]
    },
    {
      "parameters": {
        "functionCode": "const newItems = [];\nfor (var item of items) {\n  const {events, ...rest} = item.json;\n  if(events && events.length > 0) {\n    for (var event of events) {\n      if(event.eventType === \"StartChildWorkflowExecutionInitiated\" && event.startChildWorkflowExecutionInitiatedEventAttributes) {\n        newItems.push({json: { ...rest, childWorflowId: event.startChildWorkflowExecutionInitiatedEventAttributes.workflowId}});\n      }\n    }\n  }\n}\nreturn newItems;\n"
      },
      "name": "GetChildWorkflow",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1900,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{!Object.keys($node[\"GetMetroCanceledErrorItems\"].json).length}}",
              "value2": true
            }
          ]
        }
      },
      "name": "IFEmptyMetroError",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2080,
        1140
      ]
    },
    {
      "parameters": {
        "mode": "multiplex"
      },
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1720,
        680
      ]
    },
    {
      "parameters": {
        "mode": "multiplex"
      },
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2880,
        800
      ]
    },
    {
      "parameters": {
        "functionCode": "function sleep(milliseconds) {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  );\n}\n\nawait sleep(1000);\n\n// Output data\nreturn items;"
      },
      "name": "Sleep 1 secs",
      "type": "n8n-nodes-base.function",
      "position": [
        1240,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "function sleep(milliseconds) {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  );\n}\n\nawait sleep(1000);\n\n// Output data\nreturn items;"
      },
      "name": "Sleep 1 secs1",
      "type": "n8n-nodes-base.function",
      "position": [
        2160,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "=C:\\Users\\ies325\\Documents\\bin\\tctl.exe --address 10.201.4.24:7233 workflow showid {{$json[\"searchWorkflowId\"]}} --output_filename temp-{{$json[\"subscriptionid\"]}}.json"
      },
      "name": "tctlSearch3",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1100,
        480
      ],
      "alwaysOutputData": false,
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{!!$node[\"tctlSearch3\"].json[\"error\"]}}",
              "value2": true
            }
          ],
          "number": []
        }
      },
      "name": "IFNoSubscriptionWF2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        2400,
        860
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "command": "=C:\\Users\\ies325\\Documents\\bin\\tctl.exe --address 10.201.4.24:7233 workflow showid {{$json[\"childWorflowId\"]}} --output_filename temp-{{$json[\"childWorflowId\"]}}.json"
      },
      "name": "tctlSearchChildWF",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2020,
        840
      ],
      "alwaysOutputData": false,
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "function sleep(milliseconds) {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  );\n}\n\nawait sleep(500);\n\n// Output data\nreturn items;"
      },
      "name": "Sleep 3 secs3",
      "type": "n8n-nodes-base.function",
      "position": [
        2380,
        1400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "function sleep(milliseconds) {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  );\n}\n\nawait sleep(500);\n\n// Output data\nreturn items;"
      },
      "name": "Sleep 3 secs4",
      "type": "n8n-nodes-base.function",
      "position": [
        2140,
        1580
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "function sleep(milliseconds) {\n  return new Promise(\n    resolve => setTimeout(resolve, milliseconds)\n  );\n}\n\nawait sleep(500);\n\n// Output data\nreturn items;"
      },
      "name": "Sleep 3 secs5",
      "type": "n8n-nodes-base.function",
      "position": [
        2780,
        1360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "functionCode": "const newItems = [];\nfor (var item of items) {\n  const {events, ...rest} = item.json;\n  if (events && events.length > 0) {\n    for (var event of events) {\n      if(event.eventType === \"ActivityTaskFailed\" &&\n        event[\"activityTaskFailedEventAttributes\"] &&\n        event[\"activityTaskFailedEventAttributes\"][\"failure\"] &&\n        event[\"activityTaskFailedEventAttributes\"][\"failure\"][\"message\"] &&\n        event[\"activityTaskFailedEventAttributes\"][\"failure\"][\"message\"] == \"metro order has been cancelled\"\n      ) {\n        newItems.push({ json: { ...rest } });\n      }      \n    }\n  }\n}\nreturn newItems;\n"
      },
      "name": "GetMetroCanceledErrorItems",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        3060,
        800
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1880,
        1580
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "table": "customer_contract_subscription",
        "updateKey": "customer_contract_subscriptionid ",
        "columns": "contract_status"
      },
      "name": "MySQL",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "position": [
        2600,
        1580
      ],
      "credentials": {
        "mySql": {
          "id": null,
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "number": [
            {
              "name": "customer_contract_subscriptionid ",
              "value": "={{$json[\"SubscriptionId\"]}}"
            },
            {
              "name": "contract_status",
              "value": 4
            }
          ]
        },
        "options": {}
      },
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        2340,
        1580
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2360,
        1100
      ]
    },
    {
      "parameters": {
        "mode": "passThrough"
      },
      "name": "Merge9",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2280,
        1760
      ]
    },
    {
      "parameters": {
        "command": "=C:\\Users\\ies325\\Documents\\bin\\bss.exe order -o 10.201.4.24:5004 deliver {{$json[\"SubscriptionId\"]}}"
      },
      "name": "tctlSearch2",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2140,
        1920
      ],
      "alwaysOutputData": false,
      "continueOnFail": true
    },
    {
      "parameters": {
        "functionCode": "\nreturn item;"
      },
      "name": "FunctionItem",
      "type": "n8n-nodes-base.functionItem",
      "typeVersion": 1,
      "position": [
        1980,
        1840
      ]
    }
  ],
  "connections": {
    "Cron": {
      "main": [
        [
          {
            "node": "PendingActivationOrders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "IFNoSubscriptionWF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tctlSearch": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "FunctionItem2": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          },
          {
            "node": "tctlSearch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IFNoSubscriptionWF": {
      "main": [
        [
          {
            "node": "Sleep 3 secs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sleep 3 secs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitInBatches": {
      "main": [
        [
          {
            "node": "FunctionItem2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "NoOp2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sleep 3 secs": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sleep 3 secs1": {
      "main": [
        [
          {
            "node": "tctlSearch3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PendingActivationOrders": {
      "main": [
        [
          {
            "node": "SplitInBatches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "IFNoSubscriptionWF1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tctlSearch1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "IFNoSubscriptionWF1": {
      "main": [
        [
          {
            "node": "Sleep 3 secs2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Binary File1": {
      "main": [
        [
          {
            "node": "Move Binary Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move Binary Data": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge7": {
      "main": [
        [
          {
            "node": "Read Binary File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Binary File2": {
      "main": [
        [
          {
            "node": "Move Binary Data1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Move Binary Data1": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge8": {
      "main": [
        [
          {
            "node": "IFNoSubscriptionWF2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetChildWorkflow": {
      "main": [
        [
          {
            "node": "Merge8",
            "type": "main",
            "index": 0
          },
          {
            "node": "tctlSearchChildWF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IFEmptyMetroError": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "GetChildWorkflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "GetMetroCanceledErrorItems",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sleep 1 secs": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Sleep 1 secs1": {
      "main": [
        [
          {
            "node": "Merge8",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "tctlSearch3": {
      "main": [
        [
          {
            "node": "Sleep 1 secs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IFNoSubscriptionWF2": {
      "main": [
        [
          {
            "node": "Sleep 3 secs5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Read Binary File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tctlSearchChildWF": {
      "main": [
        [
          {
            "node": "Sleep 1 secs1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sleep 3 secs3": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sleep 3 secs4": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sleep 3 secs5": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GetMetroCanceledErrorItems": {
      "main": [
        [
          {
            "node": "IFEmptyMetroError",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "FunctionItem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Sleep 3 secs3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge9": {
      "main": [
        [
          {
            "node": "Sleep 3 secs4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "tctlSearch2": {
      "main": [
        [
          {
            "node": "Merge9",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "FunctionItem": {
      "main": [
        [
          {
            "node": "Merge9",
            "type": "main",
            "index": 0
          },
          {
            "node": "tctlSearch2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2022-04-20T20:18:42.618Z",
  "updatedAt": "2022-04-21T13:01:57.427Z",
  "settings": {},
  "staticData": null
}